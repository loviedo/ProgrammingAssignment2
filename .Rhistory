cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getsolve()
if(!is.null(inv)){
message("obtener datos cacheados")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setsolve(inv)
inv ##return inverted matrix
}
m <- matrix(rnorm(16),4,4)
m
m1 <- makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix(sample(1:10,16),4,4)) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setsolve <- function(solve) inv <<- solve
getsolve <- function() inv
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
m1 <- makeCacheMatrix(m)
NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setsolve <- function(solve) inv <<- solve
getsolve <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getsolve()
if(!is.null(inv)){
message("obtener datos cacheados")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setsolve(inv)
inv ##return inverted matrix
}
makeCacheMatrix <- function(x = matrix(sample(1:10,16),4,4)) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setsolve <- function(solve) inv <<- solve
getsolve <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
m1 <- makeCacheMatrix(m)
setsolve <- function(solve) inv <<- solve
makeCacheMatrix <- function(x = matrix(sample(1:10,16),4,4)) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setsolve <- function(solve) inv <<- solve
getsolve <- function() inv
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getsolve()
if(!is.null(inv)){
message("obtener datos cacheados")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setsolve(inv)
inv ##return inverted matrix
}
m1 <- makeCacheMatrix(m)
m1
cacheSolve(m1)
